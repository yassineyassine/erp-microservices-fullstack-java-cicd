/*
 * This is a microservice e-commerce store sample with Gateway and three microservice applications.
 * This uses Consul for service discovery and OIDC authentication.
 * This also creates the required Kubernetes deployment manifests.
 */
 
 
DEFAULT_MIN_LENGTH = 1
DEFAULT_MAX_LENGTH = 32
DEFAULT_MIN_BYTES = 20
DEFAULT_MAX_BYTES = 40
DEFAULT_MIN = 0
DEFAULT_MAX = 999
 
application {
  config {
    baseName store
    applicationType gateway
    packageName com.soft.erp.store
    serviceDiscoveryType consul
    authenticationType jwt
    prodDatabaseType mysql
    cacheProvider no
    buildTool maven
	  reactive true
	  enableSwaggerCodegen true
    clientFramework angular
  }
  entities *
}



application {
  config {
    baseName product
    applicationType microservice
    packageName com.soft.erp.product
    serviceDiscoveryType consul
    authenticationType jwt
    prodDatabaseType mysql
    cacheProvider no
    buildTool maven
    serverPort 8081
    reactive true
	enableSwaggerCodegen true
	searchEngine elasticsearch
  }
  entities Product, ProductCategory, ProductOrder, OrderItem
}

application {
  config {
    baseName invoice
    applicationType microservice
    packageName com.soft.erp.invoice
    serviceDiscoveryType consul
    authenticationType jwt
    prodDatabaseType mysql
    buildTool maven
    serverPort 8082
    reactive true
	enableSwaggerCodegen true
	searchEngine elasticsearch
  }
  entities Invoice, Shipment
}

application {
  config {
    baseName notification
    applicationType microservice
    packageName com.soft.erp.notification
    serviceDiscoveryType consul
    authenticationType jwt
    databaseType mysql
    cacheProvider no
    enableHibernateCache false
    buildTool maven
    serverPort 8083
    reactive true
	enableSwaggerCodegen true
	searchEngine elasticsearch
  }
  entities Notification
}

/**
 * Entities for Store Gateway
 */

// Customer for the store
entity Customer {
    firstName String required maxlength(DEFAULT_MAX_LENGTH)
    lastName String required maxlength(DEFAULT_MAX_LENGTH)
    gender Gender required
    email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
    phone String required
    addressLine1 String required
    addressLine2 String
    city String required maxlength(DEFAULT_MAX_LENGTH)
    country String required
}

enum Gender {
    MALE, FEMALE, OTHER
}


service Customer with serviceClass
paginate Customer with pagination


/**
 * Entities for product microservice
 */


// Product sold by the Online store 
entity Product {
    name String required
    description String
    price BigDecimal required min(0)
    itemSize Size required
    image ImageBlob
}

enum Size {
    S, M, L, XL, XXL
}

entity ProductCategory {
    name String required
    description String
}

entity ProductOrder {
    placedDate Instant required
    status OrderStatus required
    code String required
    invoiceId Long
    customer String required
}

enum OrderStatus {
    COMPLETED, PENDING, CANCELLED
}

entity OrderItem {
    quantity Integer required min(0)
    totalPrice BigDecimal required min(0)
    status OrderItemStatus required
}

enum OrderItemStatus {
    AVAILABLE, OUT_OF_STOCK, BACK_ORDER
}

relationship ManyToOne {
	OrderItem{product(name) required} to Product
}

relationship OneToMany {
   ProductOrder{orderItem} to OrderItem{order(code) required} ,
   ProductCategory{product} to Product{productCategory(name)}
}

service Product, ProductCategory, ProductOrder, OrderItem with serviceClass
paginate Product, ProductOrder, OrderItem with pagination
microservice Product, ProductOrder, ProductCategory, OrderItem with product


/**
 * Entities for Invoice microservice
 */


// Invoice for sales
entity Invoice {
    code String required
    date Instant required
    details String
    status InvoiceStatus required
    paymentMethod PaymentMethod required
    paymentDate Instant required
    paymentAmount BigDecimal required
}

enum InvoiceStatus {
    PAID, ISSUED, CANCELLED
}

entity Shipment {
    trackingCode String
    date Instant required
    details String
}

enum PaymentMethod {
    CREDIT_CARD, CASH_ON_DELIVERY, PAYPAL
}

relationship OneToMany {
    Invoice{shipment} to Shipment{invoice(code) required}
}

service Invoice, Shipment with serviceClass
paginate Invoice, Shipment with pagination
microservice Invoice, Shipment with invoice


/**
 * Entities for notification microservice
 */


entity Notification {
    date Instant required
    details String
    sentDate Instant required
    format NotificationType required
    userId Long required
    productId Long required
}

enum NotificationType {
    EMAIL, SMS, PARCEL
}

microservice Notification with notification

// Use a service layer with an interface for all entities.
service all with serviceImpl

// Use DTO's with the service layer with MapStruct.
dto * with mapstruct

/**
 * Deployments
 */

deployment {
  deploymentType kubernetes
  appsFolders [store, invoice, notification, product]
  dockerRepositoryName "yassine2912" // @Replace With Your Docker repo name@
  serviceDiscoveryType consul
  kubernetesServiceType LoadBalancer
  kubernetesNamespace jhipster
}